#Question-1
#Part-1
#the global variable value
$my_name = "Sue"

#greeting a person

def greeting_a_person(name)
    puts “Why hello there #{name}, my name is #{$my_name}.”
end

#argument method
greeting_a_person("Bob")

------------------------------------------------------------------------------------------------

#Question1
#Part2

puts “Why hello there %s, my name is Sue” %["Bob"]
puts “Why hello there %s, my name is %s” %["Bob","Sue"]

-----------------------------------------------------------------------------------------------

#Question2

$sell1 = 0
$sell2 = 0
$sell3 = 0
$completesales = 0

class Vending_Stuff

  def 
	initialize(item, price, vend_number)
    @item = item
    @price = price
    @vend_number = vend_number
    @supply = 0
  end
  def 
	stock(article,num_items)
    article.stock(article,num_items)
  end
  def 
	vend(article)
    article.vend(article)
    article.selling(article)
  end
  
  def 
	cummulative_sale(thing1,thing2,thing3)
    $sell1 = (thing1.selling(thing1) ).to_i
    $sell2 = (thing2.selling(thing2)).to_i
    $sell3 = (thing3.selling(thing3)).to_i
    $complte_sales = $sell1 + $sell2 + $sell3
    puts "total sale in cummulative selling are #{$complte_sales}"
  end
  def to_str()
    puts "Hey there I am in"
  end

end

class Chips < Vending_Stuff
  @@supply = 0

  @selling = 0
  @@vended_supply = 0
  def initialize(item, price, vend_number)
    super(item, price, vend_number)
  end
  def stock(thing,num_items)
  @@supply = @@supply + num_items
  "Supply of chips are #{@@supply}"
  end
  def vend(thing)
    if @@supply > 0

    @@supply = @@supply - 1
    @@vended_supply = @@vended_supply + 1
    "One article vended successfully"
    else
      "No item to vend"
    end
  end
  def selling(thing)
    @selling = @selling.to_i + (@price.to_i * @@vended_supply.to_i)
    puts "selling of chips are #{@selling}"
    return @selling
  end
  def to_str()
    print ("In chips ")
    super()
  end

end

  class CandyBar < VendingStuff
    @@supply = 0
    @selling = 0
    @@vended_supply = 0
    def stock(thing, num_items)
      @@supply = @@supply + num_items
      "Supply of candy bars is #{@@supply}"
    end
    def vend(thing)
      if @@supply > 0

        @@supply = @@supply - 1
        @@vended_supply = @@vended_supply + 1
        "One article vended successfully"
      else
        "No article to vend"
      end
    end
    def selling(thing)
      @selling = @selling.to_i + (@price.to_i * @@vended_supply.to_i)
      puts "selling of candy bars is #{@selling}"
      return @selling
    end
    def to_str()
      print ("In candy bar ")
      super()
    end

  end

class Crackers < VendingStuff
  @@supply = 0
  @selling = 0
  @@vended_supply = 0
  def stock(thing, num_items)
  @@supply = @@supply + num_items
  "Supply of crackers are #{@@supply}"
  end
  def vend(thing)
    if @@supply > 0

      @@supply = @@supply - 1
      @@vended_supply = @@vended_supply + 1
      "One article vended successfully"
    else
      "No article to vend"
    end
  end
  def selling(thing)
    @selling = @selling.to_i + (@price.to_i * @@vended_supply.to_i)
    puts "selling of crackers are #{@selling}"
    return @selling
  end
  def to_str()
    print ("In crackers ")
    super()
  end

end


objct1 = VendingStuff.new("food vendor",0,0)


=begin

objct3 = CandyBar.new("candy bar", 20, 2)
puts objct1.stock(objct3,3)

puts objct1.vend(objct3)
puts objct1.vend(objct3)
puts objct1.selling(objct3)
=end

objct2 = Chips.new("chips", 10, 1)

objct5 = Chips.new("chips", 10, 1)
puts objct1.stock(objct2,10)

puts objct1.vend(objct2)


objct3 = CandyBar.new("candy bar", 10, 1)
puts objct1.stock(objct3,10)
puts objct1.vend(objct3)

objct4 = Crackers.new("crackers", 10, 1)
puts objct1.stock(objct4,10)
puts objct1.vend(objct4)

puts objct1.cummulative_sale(objct2,objct3,objct4)
puts objct2.to_str()
puts objct3.to_str()
puts objct4.to_str()

---------------------------------------------------------------------------------------------

#Question3

class Evaluation
def 
calc(*arg)
operationRelational = ["\<", '\>', "\="]
arg.each do |arg_item|
calculationType = ""
outPut = ""
if operationRelational.any? { |operationRelational| arg_item.include?(operationRelational) }
calculationType = "Relational"
else
calculationType = "Arithmetic"
end

case calculationType
when 'Relational'
if arg_item.match(/\d\=\d/)
puts "Replace  single = with double for evaluation"
arg_item.gsub! /\=/, '=='
end
        	outPut = eval(arg_item) ? 'TRUE' : 'FALSE'
      	when 'Arithmetic'
      	outPut=eval(arg_item)
        	end
        	puts "Argument is #{arg_item} and Output is #{outPut}"
end
end
end

-----------------------------------------------------------------------------------------------------

#Question4


ok = {
    'City1' => 1522,
    'City2' => 2533,
    'City3' => 3544,
    'City4' => 4555,
    'City5' => 5566,
    'City6' => 7688,
    'City7' => 8799,
    'City8' => 9811,
    'City9' => 9922,
    'City10' => 9999
}

loop do
    puts 'Do you want to choose a City ?(Y/N)'
    answer = gets.chomp.downcase
    break if answer != 'Y'
    puts 'Available cities are:'
    dial_book.each_key { |key| puts key }
    puts 'Which City Area Code to be known?'
    city_answer = gets.chomp
    dial_book.each do |key, value|
    puts "The Area Code of #{key} is #{value}" if city_answer.casecmp(key) == 0
    end
end